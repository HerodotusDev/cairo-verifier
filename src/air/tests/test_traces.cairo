use cairo_verifier::{
    air::{
        autogenerated::{eval_composition_polynomial_inner, eval_oods_polynomial_inner},
        constants::{
            MASK_SIZE, N_CONSTRAINTS, NUM_COLUMNS_FIRST, NUM_COLUMNS_SECOND, CONSTRAINT_DEGREE
        },
        global_values::{GlobalValues, EcPoint, InteractionElements},
        public_input::{PublicInput, SegmentInfo},
        public_memory::{AddrValue, ContinuousPageHeader, Page},
        traces::{traces_commit, TracesCommitment, TracesUnsentCommitment},
        traces_config::TracesConfig,
    },
    channel::channel::{Channel, ChannelImpl},
    table_commitment::table_commitment::{TableCommitment, TableCommitmentConfig},
    vector_commitment::vector_commitment::{VectorCommitment, VectorCommitmentConfig},
};

// test generated based on cairo0-verifier run on fib proof from stone-prover
#[test]
#[available_gas(9999999999)]
fn test_traces_commit() {
    let mut channel = ChannelImpl::new_with_counter(
        u256 { low: 0x9efc852f6c952fa4ee91804b921401b7, high: 0xd6ee1ac3785b19aa9e6568e87c220ef7 },
        0x0,
    );
    let public_input = PublicInput {
        log_n_steps: 0xe,
        rc_min: 0x7ffa,
        rc_max: 0x8001,
        layout: 0x726563757273697665,
        dynamic_params: array![],
        segments: array![
            SegmentInfo { begin_addr: 0x1, stop_ptr: 0x5 },
            SegmentInfo { begin_addr: 0x25, stop_ptr: 0x5 },
            SegmentInfo { begin_addr: 0x4f, stop_ptr: 0x4f },
            SegmentInfo { begin_addr: 0x51, stop_ptr: 0x51 },
            SegmentInfo { begin_addr: 0x1d1, stop_ptr: 0x1d1 },
            SegmentInfo { begin_addr: 0x9d1, stop_ptr: 0x9d1 },
        ],
        padding_addr: 0x1,
        padding_value: 0x40780017fff7fff,
        main_page: array![
            AddrValue { address: 0x1, value: 0x40780017fff7fff },
            AddrValue { address: 0x2, value: 0x4 },
            AddrValue { address: 0x3, value: 0x1104800180018000 },
            AddrValue { address: 0x4, value: 0x4 },
            AddrValue { address: 0x5, value: 0x10780017fff7fff },
            AddrValue { address: 0x6, value: 0x0 },
            AddrValue { address: 0x7, value: 0x40780017fff7fff },
            AddrValue { address: 0x8, value: 0x1 },
            AddrValue { address: 0x9, value: 0x400380007ffa8000 },
            AddrValue { address: 0xa, value: 0x480680017fff8000 },
            AddrValue { address: 0xb, value: 0x1 },
            AddrValue { address: 0xc, value: 0x480680017fff8000 },
            AddrValue { address: 0xd, value: 0x1 },
            AddrValue { address: 0xe, value: 0x480a80007fff8000 },
            AddrValue { address: 0xf, value: 0x1104800180018000 },
            AddrValue { address: 0x10, value: 0x9 },
            AddrValue { address: 0x11, value: 0x400280017ffa7fff },
            AddrValue { address: 0x12, value: 0x482680017ffa8000 },
            AddrValue { address: 0x13, value: 0x2 },
            AddrValue { address: 0x14, value: 0x480a7ffb7fff8000 },
            AddrValue { address: 0x15, value: 0x480a7ffc7fff8000 },
            AddrValue { address: 0x16, value: 0x480a7ffd7fff8000 },
            AddrValue { address: 0x17, value: 0x208b7fff7fff7ffe },
            AddrValue { address: 0x18, value: 0x20780017fff7ffd },
            AddrValue { address: 0x19, value: 0x4 },
            AddrValue { address: 0x1a, value: 0x480a7ffc7fff8000 },
            AddrValue { address: 0x1b, value: 0x208b7fff7fff7ffe },
            AddrValue { address: 0x1c, value: 0x480a7ffc7fff8000 },
            AddrValue { address: 0x1d, value: 0x482a7ffc7ffb8000 },
            AddrValue { address: 0x1e, value: 0x482680017ffd8000 },
            AddrValue { address: 0x1f, value: 0x8000000000 },
            AddrValue { address: 0x20, value: 0x1104800180018000 },
            AddrValue { address: 0x21, value: 0x8000000000 },
            AddrValue { address: 0x22, value: 0x208b7fff7fff7ffe },
            AddrValue { address: 0x23, value: 0x25 },
            AddrValue { address: 0x24, value: 0x0 },
            AddrValue { address: 0x25, value: 0x4f },
            AddrValue { address: 0x26, value: 0x51 },
            AddrValue { address: 0x27, value: 0x1d1 },
            AddrValue { address: 0x28, value: 0x9d1 },
            AddrValue { address: 0x4b, value: 0x51 },
            AddrValue { address: 0x4c, value: 0x51 },
            AddrValue { address: 0x4d, value: 0x1d1 },
            AddrValue { address: 0x4e, value: 0x9d1 },
            AddrValue { address: 0x4f, value: 0x5 },
            AddrValue { address: 0x50, value: 0xd },
        ],
        continuous_page_headers: array![],
    };
    let unsent_commitment = TracesUnsentCommitment {
        original: 0x7465b66577866d00bbb6306db1ac2db178e1be07b159a4deea545d4dcb5cb31,
        interaction: 0xc1884bebff369451aab261a882e769ccad87590e29177859afbe150f3bdc2a,
    };
    let traces_config = TracesConfig {
        original: TableCommitmentConfig {
            n_columns: 0x7,
            vector: VectorCommitmentConfig {
                height: 0x16, n_verifier_friendly_commitment_layers: 0x16
            },
        },
        interaction: TableCommitmentConfig {
            n_columns: 0x3,
            vector: VectorCommitmentConfig {
                height: 0x16, n_verifier_friendly_commitment_layers: 0x16
            },
        },
    };

    let expected_result = TracesCommitment {
        public_input: @public_input,
        original: TableCommitment {
            config: TableCommitmentConfig {
                n_columns: 0x7,
                vector: VectorCommitmentConfig {
                    height: 0x16, n_verifier_friendly_commitment_layers: 0x16
                },
            },
            vector_commitment: VectorCommitment {
                config: VectorCommitmentConfig {
                    height: 0x16, n_verifier_friendly_commitment_layers: 0x16
                },
                commitment_hash: 0x7465b66577866d00bbb6306db1ac2db178e1be07b159a4deea545d4dcb5cb31,
            },
        },
        interaction_elements: InteractionElements {
            memory_multi_column_perm_perm_interaction_elm: 0x1628431f3eee5e62c087f486bc2a832b336886c67ba034af9db057af59753ec,
            memory_multi_column_perm_hash_interaction_elm0: 0x4cbf7178d4a43082b92bab6eade9263d852eb5cfdc32dba93efc0e46882f3b8,
            rc16_perm_interaction_elm: 0x1f3c9a9de275f468f3dc310fe2de24484466f03f3ecd7c2033d19a5b3dfb836,
            diluted_check_permutation_interaction_elm: 0x716051ff90afb071a29400bf097d1c70663bd871bb5d00354ce4ac2b1469f30,
            diluted_check_interaction_z: 0x475e9af24807a39bb3738aeef8b8b3bad2a0e0c6283cdfea2e89d3e6977638b,
            diluted_check_interaction_alpha: 0x23288b929aff76215d4923580e7ea365003e4ccd95717f44ddbad9a04938b6f
        },
        interaction: TableCommitment {
            config: TableCommitmentConfig {
                n_columns: 0x3,
                vector: VectorCommitmentConfig {
                    height: 0x16, n_verifier_friendly_commitment_layers: 0x16
                },
            },
            vector_commitment: VectorCommitment {
                config: VectorCommitmentConfig {
                    height: 0x16, n_verifier_friendly_commitment_layers: 0x16
                },
                commitment_hash: 0xc1884bebff369451aab261a882e769ccad87590e29177859afbe150f3bdc2a,
            },
        },
    };

    let result = traces_commit(ref channel, @public_input, unsent_commitment, traces_config);

    assert(
        result.original.config.n_columns == expected_result.original.config.n_columns,
        'Invalid value'
    );
    assert(
        result.original.config.vector.height == expected_result.original.config.vector.height,
        'Invalid value'
    );
    assert(
        result
            .original
            .config
            .vector
            .n_verifier_friendly_commitment_layers == expected_result
            .original
            .config
            .vector
            .n_verifier_friendly_commitment_layers,
        'Invalid value'
    );
    assert(
        result
            .original
            .vector_commitment
            .config
            .height == expected_result
            .original
            .config
            .vector
            .height,
        'Invalid value'
    );
    assert(
        result
            .original
            .vector_commitment
            .config
            .n_verifier_friendly_commitment_layers == expected_result
            .original
            .vector_commitment
            .config
            .n_verifier_friendly_commitment_layers,
        'Invalid value'
    );
    assert(
        result
            .original
            .vector_commitment
            .commitment_hash == expected_result
            .original
            .vector_commitment
            .commitment_hash,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .memory_multi_column_perm_perm_interaction_elm == expected_result
            .interaction_elements
            .memory_multi_column_perm_perm_interaction_elm,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .memory_multi_column_perm_hash_interaction_elm0 == expected_result
            .interaction_elements
            .memory_multi_column_perm_hash_interaction_elm0,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .rc16_perm_interaction_elm == expected_result
            .interaction_elements
            .rc16_perm_interaction_elm,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .diluted_check_permutation_interaction_elm == expected_result
            .interaction_elements
            .diluted_check_permutation_interaction_elm,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .diluted_check_interaction_z == expected_result
            .interaction_elements
            .diluted_check_interaction_z,
        'Invalid value'
    );
    assert(
        result
            .interaction_elements
            .diluted_check_interaction_alpha == expected_result
            .interaction_elements
            .diluted_check_interaction_alpha,
        'Invalid value'
    );
    assert(
        result.interaction.config.n_columns == expected_result.interaction.config.n_columns,
        'Invalid value'
    );
    assert(
        result.interaction.config.vector.height == expected_result.interaction.config.vector.height,
        'Invalid value'
    );
    assert(
        result
            .interaction
            .config
            .vector
            .n_verifier_friendly_commitment_layers == expected_result
            .interaction
            .config
            .vector
            .n_verifier_friendly_commitment_layers,
        'Invalid value'
    );
    assert(
        result
            .interaction
            .vector_commitment
            .config
            .height == expected_result
            .interaction
            .config
            .vector
            .height,
        'Invalid value'
    );
    assert(
        result
            .interaction
            .vector_commitment
            .config
            .n_verifier_friendly_commitment_layers == expected_result
            .interaction
            .vector_commitment
            .config
            .n_verifier_friendly_commitment_layers,
        'Invalid value'
    );
    assert(
        result
            .interaction
            .vector_commitment
            .commitment_hash == expected_result
            .interaction
            .vector_commitment
            .commitment_hash,
        'Invalid value'
    );
}
