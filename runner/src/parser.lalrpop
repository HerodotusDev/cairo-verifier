use crate::ast::{Expr, Exprs};

grammar;

pub CairoParserOutput: Exprs = {
    StructName "()" => Exprs(Vec::new()),
    StructName "(" <n:Comma<Arg>> ")" => Exprs(n.iter().flat_map(|x| x.iter().cloned()).collect()),
};

CairoParserOutputInner: Exprs = {
    <n:Num> => Exprs(vec![Expr::Value(n)]),
    "[" <n:Comma<CairoParserOutputInner>> "]" => Exprs(vec![Expr::Array(n.iter().flat_map(|x| x.iter().cloned()).collect())]),
    StructName "()" => Exprs(Vec::new()),
    "FriWitness" "(" "layers=" "[" <n:Comma<FriWitnessLayers>> "]" ")" => Exprs(vec![Expr::Array(n.iter().flat_map(|x| x.iter().cloned()).collect())]),
    StructName "(" <n:Comma<Arg>> ")" => Exprs(n.iter().flat_map(|x| x.iter().cloned()).collect()),
};

Arg: Exprs = {
    ArgName "=" <n:CairoParserOutputInner> => n,
};

FriWitnessLayers: Exprs = {
    <n:Num> "," "[" <a:Comma<Num>> "]" => Exprs(vec![Expr::Value(n)].into_iter().chain(a.into_iter().map(|x| Expr::Value(x))).collect()),
    StructName "(" ArgName "=" StructName "(" <n:FriWitnessLayersArgs> ")" ")" => n,
};

FriWitnessLayersArgs: Exprs = {
    ArgName "=" <n:Num> "," ArgName "=" "[" <a:Comma<Num>> "]" => Exprs(vec![Expr::Value(n)].into_iter().chain(a.into_iter().map(|x| Expr::Value(x))).collect()),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

StructName: String = <s:r"[A-Z][A-Za-z]+"> => s.to_string();
ArgName: String = <s:r"[a-z_]+"> => s.to_string();
Num: String = <s:r"[0-9]+"> => s.to_string();
